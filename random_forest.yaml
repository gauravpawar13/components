name: Randomforest
inputs:
- {name: X_training}
- {name: y_training}
- {name: X_valid}
- {name: y_valid}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'numpy' 'sklearn' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'numpy' 'sklearn' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def randomforest(X_training,y_training,X_valid,y_valid):\n    from sklearn.ensemble\
      \ import RandomForestRegressor\n    from sklearn.model_selection import GridSearchCV\n\
      \    import numpy as np\n    from sklearn.metrics import mean_squared_error,\
      \ r2_score\n\n    rfr = RandomForestRegressor()\n    paremeters_rf = {\"n_estimators\"\
      \ : [5, 10, 15, 20], \"criterion\" : [\"mse\" , \"mae\"], \"min_samples_split\"\
      \ : [2, 3, 5, 10], \n                 \"max_features\" : [\"auto\", \"log2\"\
      ]}\n    grid_rf = GridSearchCV(rfr, paremeters_rf, verbose=1, scoring=\"r2\"\
      )\n    grid_rf.fit(X_training, y_training)\n    rf = grid_rf.best_estimator_\n\
      \    rfr.fit(X_training, y_training)\n    rf_pred = rfr.predict(X_valid)\n \
      \   r2_rf = r2_score(y_valid, rf_pred)\n    rmse_rf = np.sqrt(mean_squared_error(y_valid,\
      \ rf_pred))\n    return r2_rf,rmse_rf\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Randomforest',\
      \ description='')\n_parser.add_argument(\"--X-training\", dest=\"X_training\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --y-training\", dest=\"y_training\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--X-valid\", dest=\"X_valid\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--y-valid\", dest=\"y_valid\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      \n_outputs = randomforest(**_parsed_args)\n"
    args:
    - --X-training
    - {inputValue: X_training}
    - --y-training
    - {inputValue: y_training}
    - --X-valid
    - {inputValue: X_valid}
    - --y-valid
    - {inputValue: y_valid}
